#include "commands.h"
#include <stdio.h>
#include "hardware/cpu.h"
#include "utils/busy_wait.h"


// utils
#define TRACE(var)                          printf(#var " = 0x%x\r\n", var)
#define TRACE_CHANGE(var, new_value)        printf(#var ": 0x%x -> 0x%x\r\n", var, new_value)
#define REG_READ(addr)                      (*((volatile uint32_t *)(addr)))
#define REG_WRITE(addr, _data)              (*((volatile uint32_t *)(addr)) = (_data))


#define count_of(x)     (sizeof(x) / sizeof(x[0]))

const uint32_t sctrl_tbl[] = {
        0x0007221a, 0x18221020, 0x00321200, 0x0000003f,
        0x00000028, 0x00000000, 0x00000000, 0x00000207,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000003, 0x00000000, 0x00010001, 0x00000000,
        0x3c000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x0819a59b, 0xeadd0102,
        0x24026040, 0x4fe06c50, 0x59c04520, 0x3b13b13b,
        0x00b09350, 0x00000000, 0x00000000, 0x00145326,
        0x00000000, 0xffc08010, 0x0441a7f0, 0x00335868,
        0xe3a04647, 0x808011a7, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
};

const uint32_t icu_tbl[] = {
        0x00000197, 0x00000000, 0x00ff7df8, 0x0001ffff,
        0x00000003, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
};

const uint32_t gpio_tbl[] = {
        0x00000078, 0x00000078, 0x00000000, 0x00000002,
        0x00000000, 0x00000002, 0x00000002, 0x00000002,
        0x00000028, 0x00000000, 0x00000078, 0x00000078,
        0x00000078, 0x00000078, 0x00000078, 0x00000078,
        0x00000078, 0x00000078, 0x00000078, 0x00000078,
        0x00000048, 0x00000048, 0x00000068, 0x00000068,
        0x00000028, 0x00000028, 0x00000028, 0x00000028,
        0x00000028, 0x00000028, 0x00000028, 0x0000003c,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000031, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000004, 0x00005000, 0x00000000,
        0x00000028, 0x00000028, 0x00000028, 0x00000028,
        0x00000028, 0x00000028, 0x00000028, 0x00000028,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
};

const uint32_t i2c1_tbl[] = {
        0x00001500, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
};

const uint32_t i2c2_tbl[] = {
        0x0000003b, 0x00000010, 0x000000d5, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
};

const uint32_t intc_tbl[] = {
        0x117f8207, 0x00000003, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x0000e01b, 0x00001040, 0x001a0000, 0x67676767,
        0x00000042, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
};

const struct {
    const uint32_t addr;
    const uint32_t skip;
    const uint32_t length;
    const uint32_t *tbl;
} regions[] = {
        {0x00800000, 2, count_of(sctrl_tbl), sctrl_tbl},
        {0x00802000, 0, count_of(icu_tbl),   icu_tbl},
        {0x00802800, 0, count_of(gpio_tbl),  gpio_tbl},
        {0x00802300, 0, count_of(i2c1_tbl),  i2c1_tbl},
        {0x00802600, 0, count_of(i2c2_tbl),  i2c2_tbl},
        {0x00802040, 4, count_of(intc_tbl),  intc_tbl},
};


void command_write_regs(Console &c) {
    GLOBAL_INT_DECLARATION();
    GLOBAL_INT_DISABLE();

    for (auto region: regions) {
        printf("addr 0x%08lx\r\n", region.addr);
        for (int i = 0; i < region.length; i++) {
            uint32_t addr = region.addr + (4 * i);
            printf("0x%08lx: ", addr);

            if (i < region.skip) {
                printf("skip\r\n");
                continue;
            }

            uint32_t old_value = REG_READ(addr);
            uint32_t new_value = region.tbl[i];

            if (old_value == new_value) {
                printf("0x%08lx\r\n", old_value);
            } else {
                REG_WRITE(addr, new_value);
                uint32_t actual_value = region.tbl[i];

                if (new_value == actual_value) {
                    printf(COLOR_GREEN("0x%08lx -> 0x%08lx") "\r\n", old_value, new_value);
                } else {
                    printf(COLOR_RED("0x%08lx -> 0x%08lx (actual: 0x%08lx)") "\r\n", old_value, new_value,
                           actual_value);
                }
            }

            busy_wait_us(1000);
        }

        busy_wait_us(100000);
    }

    GLOBAL_INT_RESTORE();
}
