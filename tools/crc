#!/usr/bin/env python3

import argparse
import os
import sys
import struct

def compute_crc16(data: bytes) -> int:
    """Calculate CRC16-CCITT (0x8005, initial value 0xFFFF)"""
    crc = 0xFFFF
    for byte in data:
        crc ^= byte << 8
        for _ in range(8):
            if crc & 0x8000:
                crc = (crc << 1) ^ 0x8005
            else:
                crc <<= 1
            crc &= 0xFFFF  # Keep CRC within 16 bits
    return crc

def main():
    parser = argparse.ArgumentParser(description="Encrypt file with CRC16 blocks of 32 bytes")
    parser.add_argument("input", help="Path to input file")
    parser.add_argument("output", nargs="?", help="Path to output file")
    args = parser.parse_args()

    input_path = args.input

    if input_path.endswith("_crc.bin"):
        print("Error: Input file should not end with '_crc.bin'", file=sys.stderr)
        sys.exit(1)

    if not os.path.isfile(input_path):
        print(f"Error: Input file '{input_path}' does not exist.", file=sys.stderr)
        sys.exit(1)

    if args.output:
        output_path = args.output
    else:
        if input_path.endswith(".bin"):
            output_path = input_path[:-4] + "_crc.bin"
        else:
            print("Error: Output file not specified and input file doesn't end with '.bin'", file=sys.stderr)
            sys.exit(1)

    with open(input_path, "rb") as fin, open(output_path, "wb") as fout:
        while True:
            block = fin.read(32)
            if not block:
                break

            if len(block) < 32:
                block += b'\xFF' * (32 - len(block))

            crc = compute_crc16(block)
            fout.write(block)
            fout.write(struct.pack('>H', crc))  # Big-endian 2 bytes

    output_size = os.path.getsize(output_path)
    print(f"Output written to: {output_path} ({(output_size / 1024):.2f} KB)")

if __name__ == "__main__":
    main()
